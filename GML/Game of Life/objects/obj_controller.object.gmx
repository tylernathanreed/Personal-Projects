<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_controller</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Creation Control</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//* Attributes *//
image_speed = 0;

border = 26;
grid_width = room_width/cell_size;
grid_height = (room_height-border)/cell_size;
locked = false;

//* Globals *//
global.skip = 0;
global.generation = 0;
global.grid = ds_grid_create(grid_width, grid_height); // Handles Generation
global.cells = ds_grid_create(grid_width, grid_height); // Contains Live/Dead Values
global.colors = ds_grid_create(grid_width, grid_height); // Contains Hue Color Values
global.controller = id; // Make self Global Scoped
global.draw_grid = true;
global.size = cell_size;

//* Drop-Down Menu *//
list = ddm_list_create("Red", "Orange", "Yellow", "Green", "Cyan", "Blue", "Purple", "Magenta");
ddmenu = ddm_create_menu(obj_button_color.x + 24, 2, list, 6, font_menu);

ddmenu.alpha = 1; // Menu Alpha
ddmenu.adjust = false; // Auto Adjust
ddmenu.button_width = 94; // Button Width
ddmenu.button_height = 20; // Button Height
ddmenu.scroll_width = 14; // Scroll Width
ddmenu.scroll_button_height = 14; // Scroll Button Height
ddmenu.c_ddButton = make_color_rgb(218, 218, 218); // Drop-Down Button Color
ddmenu.c_ddButtonHover = make_color_rgb(147, 206, 237); // Drop-Down Button Color
ddmenu.c_button = make_color_rgb(240, 240, 240); // Button Color
ddmenu.c_hover = make_color_rgb(51, 153, 255); // Button Hover Color
ddmenu.c_text = c_black; // Button Text Color
ddmenu.c_scrollBG = make_color_rgb(218, 218, 218); // Scroll Background Color
ddmenu.c_scrollFG = make_color_rgb(147, 206, 237); // Scroll Foreground Color
ddmenu.c_sButton = make_color_rgb(218, 218, 218); // Scroll Button Color
ddmenu.c_sButtonHover = make_color_rgb(51, 153, 255); // Scroll Button Hover Color
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Generation Control</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//* Display *//
var count;
count = string(ds_grid_get_sum(global.cells, 0, 0, grid_width, grid_height));

if(!global.running) // Game is not running
{
    window_set_caption("Game of Life | Generation: 0 | Cells: " + count);
    exit;
}

window_set_caption("Game of Life | Generation: " + string(global.generation) + " | Cells: " + count);

//* Generation Control *//
global.skip += 1;

if(global.skip &gt;= global.runspeed)
{
    global.skip = 0;
    global.generation += 1;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Mouse Control</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//* Mouse Control *//
if(global.running) // Game is not running
    exit;

// Lock the Mouse if the DDM is Opened
if(mouse_check_button(mb_none))
    locked = false;

if(ddmenu.opened || locked || obj_button_hand.hand || obj_button_shift.arrow)
{
    locked = true;
    exit;
}

cell_x = global.size*floor(mouse_x/global.size);
cell_y = global.size*floor((mouse_y - border)/global.size);

//* Left Click Control *//
if(mouse_check_button(mb_left)) // Make sure User is Left Clicking
    if(window_mouse_get_y() &gt; border) // Make sure Mouse is on the Grid
        if(!position_meeting(cell_x, cell_y, obj_cell)) // Make sure the Cell is Empty
        {
            // Set Color
            var hue;
            switch(ddmenu.option)
            {
                case "Red":
                    hue = 0;
                    break;
                case "Orange":
                    hue = 20;
                    break;
                case "Yellow":
                    hue = 40;
                    break;
                case "Green":
                    hue = 80;
                    break;
                case "Cyan":
                    hue = 120;
                    break;
                case "Blue":
                    hue = 160;
                    break;
                case "Purple":
                    hue = 200;
                    break;
                case "Magenta":
                    hue = 230;
                    break;
                default:
                    hue = 0;
                    break;
            }

            ds_grid_set(global.colors, cell_x div global.size, cell_y div global.size, make_color_hue(hue, 1));
            cell = instance_create(cell_x, cell_y, obj_cell);
        }

//* Right Click Control *//
if(mouse_check_button(mb_right)) // Make sure User is Right Clicking
    with(instance_position(cell_x, cell_y, obj_cell)) // Destroy Selection
        instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Cell Control</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//* Cell Control *//
if(!global.running || global.skip != 0) // Game is not running
    exit;

//* Increment Adjacent *//
var i, j;
with(obj_cell)
    for(i = -1; i &lt;= 1; i += 1) // Loop from Left to Right
        for(j = -1; j &lt;= 1; j += 1) // Loop from Top to Bottom
            if(i == 0 &amp;&amp; j == 0) // Skip Center / Self
                continue;
            else
            {
                ds_grid_add(global.grid, xx+i, yy+j, 1);
                ds_grid_add(global.colors, xx+i, yy+j, make_color_hue(hue, 1/3));
            }

//* Add Ghost Cells *//
with(obj_cell)
    for(i = -1; i &lt;= 1; i += 1) // Loop from Left to Right
        for(j = -1; j &lt;= 1; j += 1) // Loop from Top to Bottom
        {
            if(i == 0 &amp;&amp; j == 0) // Skip Center / Self
                continue;
            else if(ds_grid_get(global.cells, xx+i, yy+j) != 1) // Make sure a Cell isn't already there
            {
                if(ds_grid_get(global.grid, xx+i, yy+j) == 3) // Check for Reproduction
                    instance_create(x+global.size*i, y+global.size*j, obj_ghost);
                else if(ds_grid_get(global.grid, xx+i, yy+j) &gt; 0)
                    ds_grid_set(global.colors, xx+i, yy+j, 0); // Leave Color for Ghost Cells

                ds_grid_set(global.grid, xx+i, yy+j, 0); // Unmark Index
            }
        }

//* Remove Starving and Overpopulated Cells *//
with(obj_cell)
{
    var n;
    n = ds_grid_get(global.grid, xx, yy);

    if(n &lt; 2 || n &gt;= 4)
        instance_destroy();
    else
        ds_grid_set(global.colors, xx, yy, make_color_hue(hue, 1));

    ds_grid_set(global.grid, xx, yy, 0); // Unmark Index
}

//* Convert Ghost Cells to Live Cells *//
with(obj_ghost)
    instance_change(obj_cell, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Start Control</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>window_set_caption("Game of Life | Generation: 0 | Cells: 0");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Draw Menubar</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//* Draw Control *//
// Draw Menu Bar
draw_set_alpha(1);
draw_set_color(make_color_rgb(240, 240, 240));
draw_rectangle(0, 0, room_width, border-2, false); // Menubar Filler

draw_set_color(make_color_rgb(100, 100, 100));
draw_rectangle(0, 0, room_width, border-2, true); // Menubar Outline

draw_set_color(make_color_rgb(160, 160, 160));
draw_line(0, border-1, room_width, border-1); // Menubar Shadow

draw_set_color(make_color_rgb(100, 100, 100));
draw_line(0, border, room_width, border); // Menubar Divider
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Draw Background</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//* Draw Background *//
draw_set_color(c_white);
draw_set_alpha(1);
draw_rectangle(0, 0, room_width, room_height, false);

//* Draw Grid *//
if(global.draw_grid)
{
    draw_set_color(c_ltgray);
    var i;

    // Horizontal Lines
    for(i = border; i &lt; room_height; i += global.size)
        draw_line(0, i, room_width, i);

    // Vertical Lines
    for(i = 0; i &lt; room_width; i += global.size)
        draw_line(i, 0, i, room_height);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Draw Cells</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//* Draw Cells *//
var i, j;

draw_set_color(c_black);
for(i = 0; i &lt; ds_grid_width(global.cells); i += 1) // Left to Right
    for(j = 0; j &lt; ds_grid_height(global.cells); j += 1) // Top to Bottom
        if(ds_grid_get(global.cells, i, j)) // Check if a Cell Exists
            draw_cell(i*global.size, j*global.size+border, global.size,
            make_color_hue(color_get_hue(ds_grid_get(global.colors, i, j)), 1));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
