<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Creation Control</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//* Attributes *//
image_speed = 0;
opened = false // Opened Boolean
alpha = 1 // Menu Alpha
adjust = true // Auto Adjust

//* Dimensions * //
button_width = 128 // Button Width
button_height = 32 // Button Height
scroll_width = 14 // Scroll Width
scroll_button_height = scroll_width // Scroll Button Height

//* Colors *//
c_ddButton = c_white // Drop-Down Button Color
c_ddButtonHover = c_aqua // Drop-Down Button Color

c_button = c_white // Button Color
c_hover = c_aqua // Button Hover Color
c_text = c_black // Button Text Color

c_scrollBG = c_white // Scroll Background Color
c_scrollFG = c_black // Scroll Foreground Color

c_sButton = c_white // Scroll Button Color
c_sButtonHover = c_aqua // Scroll Button Hover Color

//* Variables *//
count = 0 // Number of Selections

scroll = false // Scroll Boolean
pos = 0 // Position of Scroll
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="61">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Scroll Down Control</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//* Scroll Control *//
if (scroll &amp;&amp; opened)
    if(pos &lt; count - maxScroll)
        pos += 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="60">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Scroll Up Control</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//* Scroll Control *//
if(scroll &amp;&amp; opened)
    if(pos &gt; 0)
        pos -= 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Click Control</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//* Click Control *//
if(count == 0) // Make sure the List has elements
    exit;
else if(mouse_check_over(x, y, x + button_width, y + button_height, true, true)) // Clicked the DDM
    opened = !opened;
else if(opened &amp;&amp; !mouse_check_over(x, y, x + button_width + scroll_width, y + (tMS+1)*button_height-1, true, true)) // Clicked outside of the DDM
    opened = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Draw Control</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//* Default Draw Properties *//
draw_set_font(font);
draw_set_alpha(alpha);
draw_set_halign(fa_left);
draw_set_valign(fa_center);

// Update Button Size
if(adjust)
{
    button_width = ds_list_find_widest(list)+8; // Button Width
    button_height = ds_list_find_highest(list)+8; // Button Height
}

//* Variables *//
var left, i;

left = mouse_check_button_pressed(mb_left);

count = ds_list_size(list);

// Max Scroll Size
if(maxScroll &gt; count)
    tMS = count;
else
    tMS = maxScroll;

// Configure Scrolling
if(count &gt; tMS)
    scroll = true;
else
{
    scroll = false;
    pos = 0;
}

// Draw Hovering Buttons
if(mouse_check_over(x, y, x + button_width-1, y + button_height-1, true, true))
    draw_set_color(c_hover);
else
    draw_set_color(c_button);

draw_rectangle(x, y, x + button_width, y + button_height-1, false); // Menu Fill

draw_set_color(c_text); // Selection Color
draw_text(x + 4, y + button_height/2, option); // Selection

draw_set_color(c_black);

//* Draw Drop-Down Menu *//
if(!opened)
    draw_rectangle(x, y, x + button_width, y + button_height-1, true); // Menu Border
else
{
    draw_line(x, y, x, y + button_height-1); // Left Menu Border
    draw_line(x + button_width, y, x + button_width, y + button_height-1); // Right Menu Border
    draw_line(x, y, x + button_width, y); // Top Menu Border
    
    for(i = 1; i &lt; tMS + 1; i += 1)
    {
        if(mouse_check_over(x, y + i*button_height, x + button_width-1, y + (i+1)*button_height-1, true, true)) // Over Option
        {
            if(left) // Selecting Option
            {
                option = ds_list_find_value(list, pos + i-1);
                opened = false;
            }
            
            draw_set_color(c_ddButtonHover);
        }
        else
            draw_set_color(c_ddButton);
        
        draw_rectangle(x, y + i*button_height, x + button_width, y + (i+1)*button_height, false);
        draw_set_color(c_text);
        draw_text(x + 4, y + (i+1/2)*button_height, ds_list_find_value(list, pos + i-1));
    }

    if(scroll) // Draw the Scrollbar
    {
        draw_set_color(c_scrollBG);
        draw_rectangle(x + button_width, y + button_height-1, x + button_width + scroll_width-1, y + i*button_height, false);
        draw_set_color(c_black);
        draw_rectangle(x + button_width, y + button_height-1, x + button_width + scroll_width-1, y + i*button_height, true);

        if(mouse_check_over(x + button_width+1, y + button_height+1, x + button_width + scroll_width-2, y + button_height + scroll_button_height-1, true, true)) // Over Top Scroll Button
        {
            draw_set_color(c_sButtonHover);

            if(left &amp;&amp; pos &gt; 0)
                pos -= 1;
        }
        else
            draw_set_color(c_sButton);

        draw_rectangle(x + button_width+1, y + button_height, x + button_width + scroll_width-1, y + button_height + scroll_button_height, false);
        
        if(mouse_check_over(x + button_width+1, y + (tMS+1)*button_height - scroll_button_height+1, x + button_width + scroll_width-2, y + (tMS+1)*button_height-1, true, true)) // Over Bottom Scroll Button
        {
            draw_set_color(c_sButtonHover);

            if(left)
                if(pos &lt; count - maxScroll)
                    pos += 1;
        }
        else
            draw_set_color(c_sButton);

        draw_rectangle(x + button_width+1, y + (tMS+1)*button_height, x + button_width + scroll_width-1, y + (tMS+1)*button_height - scroll_button_height, false);

        // Draw the Scroll Foreground
        draw_set_color(c_scrollFG);
        draw_rectangle(x + button_width+1, y + button_height + scroll_button_height, x + button_width + scroll_width-1, y + button_height + scroll_button_height + (tMS*button_height - scroll_button_height*2)/(count-tMS)*pos, false);

        // Draw the Button Dividers
        draw_set_color(c_black);
        draw_line(x + button_width+1, y + button_height + scroll_button_height, x + button_width + scroll_width-2, y + button_height + scroll_button_height);
        draw_line(x + button_width+1, y + (tMS+1)*button_height - scroll_button_height, x + button_width + scroll_width-2, y + (tMS+1)*button_height - scroll_button_height);
    }
}

draw_set_halign(fa_archive);
draw_set_valign(fa_archive);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
