<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Creation Control</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//* Attributes *//
image_speed = 0;

//* Images *//
normal_index = 0;
hover_index = -1;
press_index = -1;
disabled_index = 0;

//* Triggers *//
key_main = -1;
key_alt = -1;
mouse_main = -1;
mouse_alt = -1;
combo_control = false;
combo_alt = false;
combo_shift = false;

//* Label *//
label_text = "";
label_font = -1;
label_color = c_black;
label_alpha = 1;

//* Other *//
disabled = false;
fade_alpha = 0;

//* Constants *//
parent_sprite = spr_button;
fade_decay = 0.05;
parent_hover_index = 0;
parent_pressed_index = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Draw Control</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//* Positional Variables *//
var width, height, xx, yy, cx, cy;

// Find Dimensions
width = sprite_get_width(sprite_index);
height = sprite_get_height(sprite_index);

// Find Top Left Corner
xx = x - sprite_xoffset;
yy = y - sprite_xoffset;

// Find Center
cx = xx + width/2;
cy = yy + height/2;

//* Interative Variables *//
var hover, trigger_main, trigger_alt;

hover = mouse_check_over(xx, yy, xx + width, yy + height, false, true);
trigger_main = false;
trigger_alt = false;

// Main Trigger
if(mouse_main != -1)
    trigger_main = mouse_check_button_pressed(mouse_main) &amp;&amp; hover;

// Biconditional Cases for Combo Modifiers
if(key_main != -1)
    if(combo_control == keyboard_check(vk_control))
        if(combo_alt == keyboard_check(vk_alt))
            if(combo_shift == keyboard_check(vk_shift))
            {
                trigger_main = keyboard_check_pressed(key_main) || trigger_main;
                fade_alpha = 1;
            }

// Alternative Trigger
if(mouse_alt != -1)
    trigger_alt = mouse_check_button_pressed(mouse_alt) &amp;&amp; hover;

// Biconditional Cases for Combo Modifiers
if(key_alt != -1)
    if(combo_control == keyboard_check(vk_control))
        if(combo_alt == keyboard_check(vk_alt))
            if(combo_shift == keyboard_check(vk_shift))
            {
                trigger_alt = keyboard_check_pressed(key_alt) || trigger_alt;
                fade_alpha = 1;
            }


//* Trigger Control *//
if(!disabled)
{
    if(trigger_main)
        event_user(0);
    else if(trigger_alt)
        event_user(1);
}

//* Draw Control *//
if(!disabled)
{
    // Apply Fade
    if(fade &gt; fade_decay)
    {
        // Decrease Fade
        fade -= fade_decay;
        draw_set_alpha(fade);

        // Draw Fade Sprite
        if(pressed_index == -1) // Use Default Fade Index
            draw_sprite(parent_sprite, parent_pressed_index, x, y);
        else // Use Specified Fade Index
            draw_sprite(sprite_index, pressed_index, x, y);

        // Reset Alpha
        draw_set_alpha(1);
    }
    else
        fade = 0;

    // Check Pressed
    if((mouse_check_button(mouse_main) || mouse_check_button(mouse_alt)) &amp;&amp; hover)
    {
        if(pressed_index == -1) // Use Default Pressed Index
        {
            draw_sprite(parent_sprite, parent_pressed_index, x, y);
            draw_sprite(sprite_index, normal_index, x, y);
        }
        else // Use Specified Pressed Index
            draw_sprite(sprite_index, pressed_index, x, y);
    }
    else if(hover) // Check Hover
    {
        if(hover_index == -1) // Use Default Hover Index
        {
            draw_sprite(parent_sprite, parent_hover_index, x, y);
            draw_sprite(sprite_index, normal_index, x, y);
        }
        else // Use Specified Hover Index
            draw_sprite(sprite_index, hover_index, x, y);
    }
    else // Normal Index
        draw_sprite(sprite_index, normal_index, x, y);
}
else // Use Disabled Index
    draw_sprite(sprite_index, disabled_index, x, y);

//* Label Control *//
if(label_text != "" &amp;&amp; label_font != -1)
{    
    // Format Label
    draw_set_font(label_font);
    draw_set_color(label_color);
    draw_set_alpha(label_alpha);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);

    // Draw Label
    draw_text(cx, cy, label_text);

    // Revert Format
    draw_set_color(c_black);
    draw_set_alpha(1);
    draw_set_halign(fa_left);
    draw_set_valign(fa_bottom);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
